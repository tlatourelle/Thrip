<h2>Client Rendering Views</h2>
<p>
  Ajax <strong>${ajaxEnabled ? 'enabled' : 'disabled'}</strong>.
  <a href="~/home/enableajax">enable</a>
  &bull;
  <a href="~/home/disableajax">disable</a>.
</p>
<p>
  This example shows how you can generate javascript code from a spark file. This js code can be
  used client-side to create html from data in much the same way cs code does server-side.
</p>

<viewdata
  products="IList[[ClientRenderingViews.Models.Product]]"
  ajaxEnabled="bool"/>

<content:head if="ajaxEnabled">
  <script type="text/javascript" src="~/Content/jquery-1.2.6.js" once="js-jquery"></script>
  <script type="text/javascript" src="~/Content/jquery.livequery.js" once="js-livequery"></script>
  <script type="text/javascript" src="~/Home/ShowCart"></script>
  <script type="text/javascript" src="~/Content/home-index.js"></script>
</content:head>

<ul if="products.Any()">
  <li each="var product in products">
    ${product.Name}
    ${product.UnitPrice}
    <a class="cartajax?{ajaxEnabled}" href="~/home/addtocart/${product.Id}">Add to cart</a>
  </li>
</ul>
<else>
  <p>No products available</p>
</else>

<content:subcontent>
  <a class="refresh" href="~/home/index">Refresh</a>
  &bull;
  <a class="cartajax?{ajaxEnabled}" href="~/home/Reset">Reset cart</a>
  <div id="cart">
    <ShowCart/>
  </div>
</content:subcontent>

<p>
  When you have ajax enabled in this sample, all of these links will post the action to the server
  and receive the cart as json. The Spark.Home._ShowCart.RenderView() method is used to turn the cart into
  the same html the server would have produced.
</p>

